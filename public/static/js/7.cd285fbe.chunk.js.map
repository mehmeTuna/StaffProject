{"version":3,"sources":["views/Settings/components/General/components/SuccessSnackbar/SuccessSnackbar.js","views/Settings/components/General/General.js","views/Settings/components/Header/Header.js","views/Settings/Settings.js","views/Settings/components/Notifications/Notifications.js","views/Settings/components/Security/Security.js","views/Settings/components/Subscription/Subscription.js","views/Settings/index.js"],"names":["useStyles","makeStyles","theme","content","backgroundColor","colors","green","message","display","alignItems","icon","marginRight","spacing","SuccessSnackbar","props","open","onClose","classes","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","className","variant","defaultProps","root","flexDirection","textAlgin","name","marginTop","avatar","height","width","removeBotton","saveButton","color","palette","white","Header","rest","clsx","Typography","component","gutterBottom","item","action","overview","flexWrap","justifyContent","breakpoints","down","product","productImage","details","notice","values","lg","maxWidth","margin","padding","divider","grey","container","Settings","match","history","useState","setProfile","useEffect","mounted","axios","get","then","response","data","profile","openSnackbar","setOpenSnackbar","avatarUrl","firstName","lastName","email","phone","workingCondition","password","isPublic","canHire","setValues","handleChange","event","persist","target","type","checked","value","title","Divider","onSubmit","preventDefault","Grid","md","xl","xs","Card","CardContent","Button","style","onChange","e","reader","FileReader","file","files","onloadend","result","readAsDataURL","handleImageChange","Avatar","src","CardHeader","TextField","fullWidth","helperText","label","required","select","SelectProps","native","map","state","key","periode","factor","pay","CardActions"],"mappings":"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","file":"static/js/7.cd285fbe.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Snackbar, SnackbarContent, colors } from '@material-ui/core';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircleOutlined';\n\nconst useStyles = makeStyles(theme => ({\n  content: {\n    backgroundColor: colors.green[600]\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  icon: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst SuccessSnackbar = props => {\n  const { open, onClose } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center'\n      }}\n      autoHideDuration={6000}\n      onClose={onClose}\n      open={open}\n    >\n      <SnackbarContent\n        className={classes.content}\n        message={\n          <span className={classes.message}>\n            <CheckCircleIcon className={classes.icon} />\n            Successfully saved changes!\n          </span>\n        }\n        variant=\"h6\"\n      />\n    </Snackbar>\n  );\n};\n\nSuccessSnackbar.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n};\n\nSuccessSnackbar.defaultProps = {\n  open: true,\n  onClose: () => {}\n};\n\nexport default SuccessSnackbar;\n","import React, {useState, useEffect} from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Grid,\n    Card,\n    CardContent,\n    CardActions,\n    Avatar,\n    Typography,\n    Button,\n    CardHeader,\n    Divider,\n    Switch,\n    TextField,\n    colors\n} from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport SuccessSnackbar from './components/SuccessSnackbar';\n\nconst useStyles = makeStyles(theme => ({\n    root: {},\n    content: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        textAlgin: 'center'\n    },\n    name: {\n        marginTop: theme.spacing(1)\n    },\n    avatar: {\n        height: 100,\n        width: 100\n    },\n    removeBotton: {\n        width: '100%'\n    },\n    saveButton: {\n        color: theme.palette.white,\n        backgroundColor: colors.green[600],\n        '&:hover': {\n            backgroundColor: colors.green[900]\n        }\n    }\n}));\n\nconst General = () => {\n\n    const classes = useStyles();\n    const [profile,\n        setProfile] = useState(null);\n\n    useEffect(() => {\n        let mounted = true;\n\n        const fetchProfile = () => {\n            axios\n                .get('/api/account/profile')\n                .then(response => {\n                    if (mounted) {\n                        setProfile(response.data.profile);\n                    }\n                });\n        };\n\n        fetchProfile();\n\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    if (!profile) {\n        return null;\n    }\n\n    const [openSnackbar, setOpenSnackbar] = useState(false);\n    const [values, setValues] = useState({\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      state: \"\",\n      country: \"\",\n      isPublic: \"\",\n      canHire: \"\",\n    });\n\n    const handleChange = event => {\n        event.persist();\n\n        setValues({\n            ...values,\n            [event.target.name]: event.target.type === 'checkbox'\n                ? event.target.checked\n                : event.target.value\n        });\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setOpenSnackbar(true);\n    };\n\n    const handleSnackbarClose = () => {\n        setOpenSnackbar(false);\n    };\n\n    const states = ['Alabama', 'New York', 'San Francisco'];\n\n    return (\n        <Grid {...rest} className={clsx(classes.root, className)} container spacing={3}>\n            <Grid item lg={4} md={6} xl={3} xs={12}>\n                <Card {...rest} className={clsx(classes.root, className)}>\n                    <CardContent className={classes.content}>\n                        <Avatar className={classes.avatar} src=\"#\"/>\n                        <Typography className={classes.name} gutterBottom variant=\"h3\">\n                            Mehmet Tuna\n                        </Typography>\n                        <Typography color=\"textSecondary\" variant=\"body1\">\n                            Free Time, GSM\n                        </Typography>\n                        <Typography color=\"textSecondary\" variant=\"body2\">\n                            Birthday\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        <Button className={classes.removeBotton} variant=\"text\">\n                            Remove picture\n                        </Button>\n                    </CardActions>\n                </Card>\n            </Grid>\n            <Grid item lg={8} md={6} xl={9} xs={12}>\n                <Card {...rest} className={clsx(classes.root, className)}>\n                    <form onSubmit={handleSubmit}>\n                        <CardHeader title=\"Profile\"/>\n                        <Divider/>\n                        <CardContent>\n                            <Grid container spacing={4}>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        helperText=\"Please specify the first name\"\n                                        label=\"First name\"\n                                        name=\"firstName\"\n                                        onChange={handleChange}\n                                        required\n                                        value={values.firstName}\n                                        variant=\"outlined\"/>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Last name\"\n                                        name=\"lastName\"\n                                        onChange={handleChange}\n                                        required\n                                        value={values.lastName}\n                                        variant=\"outlined\"/>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Email Address\"\n                                        name=\"email\"\n                                        onChange={handleChange}\n                                        required\n                                        value={values.email}\n                                        variant=\"outlined\"/>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Phone Number\"\n                                        name=\"phone\"\n                                        onChange={handleChange}\n                                        type=\"text\"\n                                        value={values.phone}\n                                        variant=\"outlined\"/>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField fullWidth label=\"Select State\" name=\"state\" onChange={handleChange} select // eslint-disable-next-line react/jsx-sort-props\n                                        SelectProps={{\n                                        native: true\n                                    }} value={values.state} variant=\"outlined\">\n                                        {states.map(state => (\n                                            <option key={state} value={state}>\n                                                {state}\n                                            </option>\n                                        ))}\n                                    </TextField>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <TextField\n                                        fullWidth\n                                        label=\"Country\"\n                                        name=\"country\"\n                                        onChange={handleChange}\n                                        required\n                                        value={values.country}\n                                        variant=\"outlined\"/>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <Typography variant=\"h6\">Make Contact Info Public</Typography>\n                                    <Typography variant=\"body2\">\n                                        Means that anyone viewing your profile will be able to see your contacts details\n                                    </Typography>\n                                    <Switch\n                                        checked={values.isPublic}\n                                        color=\"secondary\"\n                                        edge=\"start\"\n                                        name=\"isPublic\"\n                                        onChange={handleChange}/>\n                                </Grid>\n                                <Grid item md={6} xs={12}>\n                                    <Typography variant=\"h6\">Available to hire</Typography>\n                                    <Typography variant=\"body2\">\n                                        Toggling this will let your teamates know that you are available for acquireing\n                                        new projects\n                                    </Typography>\n                                    <Switch\n                                        checked={values.canHire}\n                                        color=\"secondary\"\n                                        edge=\"start\"\n                                        name=\"canHire\"\n                                        onChange={handleChange}/>\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n                        <Divider/>\n                        <CardActions>\n                            <Button className={classes.saveButton} type=\"submit\" variant=\"contained\">\n                                Save Changes\n                            </Button>\n                        </CardActions>\n                    </form>\n                    <SuccessSnackbar onClose={handleSnackbarClose} open={openSnackbar}/>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n};\n\nGeneral.propTypes = {\n    className: PropTypes.string\n};\n\nexport default General;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography\n        component=\"h2\"\n        gutterBottom\n        variant=\"overline\"\n      >\n        Staff Editor\n      </Typography>\n      <Typography\n        component=\"h1\"\n        variant=\"h3\"\n      >\n        New Staff Add\n      </Typography>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, {useState, useEffect} from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Grid,\n    Card,\n    CardContent,\n    CardActions,\n    Avatar,\n    Typography,\n    Button,\n    CardHeader,\n    Divider,\n    Switch,\n    TextField,\n    colors\n} from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport SuccessSnackbar from './components/General/components/SuccessSnackbar';\n\nimport {Page} from 'components';\nimport {Header} from './components';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: theme.breakpoints.values.lg,\n        maxWidth: '100%',\n        margin: '0 auto',\n        padding: theme.spacing(3)\n    },\n    divider: {\n        backgroundColor: colors.grey[300]\n    },\n    container: {\n        marginTop: theme.spacing(3)\n    },\n    content: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        textAlgin: 'center'\n    },\n    name: {\n        marginTop: theme.spacing(1)\n    },\n    avatar: {\n        height: 100,\n        width: 100\n    },\n    removeBotton: {\n        width: '100%'\n    },\n    saveButton: {\n        color: theme.palette.white,\n        backgroundColor: colors.green[600],\n        '&:hover': {\n            backgroundColor: colors.green[900]\n        }\n    }\n}));\n\nconst Settings = props => {\n    const {match, history} = props;\n    const classes = useStyles();\n\n    const [profile,\n        setProfile] = useState(null);\n\n    useEffect(() => {\n        let mounted = true;\n\n        const fetchProfile = () => {\n            axios\n                .get('/api/account/profile')\n                .then(response => {\n                    if (mounted) {\n                        setProfile(response.data.profile);\n                    }\n                });\n        };\n\n        fetchProfile();\n\n        return () => {\n            mounted = false;\n        };\n    }, []);\n\n    const [openSnackbar,\n        setOpenSnackbar] = useState(false);\n    const [values,\n        setValues] = useState({\n        avatar: \"\",\n        avatarUrl: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        phone: \"\",\n        workingCondition: \"\",\n        password: \"\",\n        isPublic: \"\",\n        canHire: \"\"\n    });\n\n    const handleChange = event => {\n        event.persist();\n\n        setValues({\n            ...values,\n            [event.target.name]: event.target.type === 'checkbox'\n                ? event.target.checked\n                : event.target.value\n        });\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        setOpenSnackbar(true);\n    };\n\n    const handleSnackbarClose = () => {\n        setOpenSnackbar(false);\n    };\n\n    const handleImageChange = (e) => {\n        e.preventDefault();\n\n        let reader = new FileReader();\n        let file = e.target.files[0];\n\n        reader.onloadend = () => {\n            setValues({avatar: file, avatarUrl: reader.result});\n        }\n\n        reader.readAsDataURL(file)\n    }\n\n    const workingConditions = ['one', 'two', 'three'];\n\n    return (\n        <Page className={classes.root} title=\"Staff\">\n            <Header/>\n            <Divider className={classes.divider}/>\n            <div className={classes.container}>\n                <form onSubmit={handleSubmit}>\n                    <Grid className={classes.root} container spacing={3}>\n                        <Grid item lg={4} md={6} xl={3} xs={12}>\n                            <Card className={classes.root}>\n                                <CardContent className={classes.content}>\n                                    {values.avatarUrl === \"\"\n                                        ? <Button variant=\"contained\" component=\"label\">\n                                                Select Profile Image\n                                                <input\n                                                    type=\"file\"\n                                                    style={{\n                                                    display: \"none\"\n                                                }}\n                                                    onChange={(e) => handleImageChange(e)}/>\n                                            </Button>\n                                        : <Avatar className={classes.avatar} src={values.avatarUrl}/>}\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        <Grid item lg={8} md={6} xl={9} xs={12}>\n                            <Card className={classes.root}>\n                                <CardHeader title=\"Profile\"/>\n                                <Divider/>\n                                <CardContent>\n                                    <Grid container spacing={4}>\n                                        <Grid item md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                helperText=\"Please specify the first name\"\n                                                label=\"First name\"\n                                                name=\"firstName\"\n                                                onChange={handleChange}\n                                                required\n                                                value={values.firstName}\n                                                variant=\"outlined\"/>\n                                        </Grid>\n                                        <Grid item md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Last name\"\n                                                name=\"lastName\"\n                                                onChange={handleChange}\n                                                required\n                                                value={values.lastName}\n                                                variant=\"outlined\"/>\n                                        </Grid>\n                                        <Grid item md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Email Address\"\n                                                name=\"email\"\n                                                onChange={handleChange}\n                                                required\n                                                value={values.email}\n                                                variant=\"outlined\"/>\n                                        </Grid>\n                                        <Grid item md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Phone Number\"\n                                                name=\"phone\"\n                                                onChange={handleChange}\n                                                type=\"text\"\n                                                value={values.phone}\n                                                variant=\"outlined\"/>\n                                        </Grid>\n                                        <Grid item md={6} xs={12}>\n                                            <TextField fullWidth label=\"Working Conditions\" name=\"workingCondition\" onChange={handleChange} select // eslint-disable-next-line react/jsx-sort-props\n                                                SelectProps={{\n                                                native: true\n                                            }} value={values.workingCondition} variant=\"outlined\">\n                                                {workingConditions.map(state => (\n                                                    <option key={state} value={state}>\n                                                        {state}\n                                                    </option>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Password\"\n                                                name=\"password\"\n                                                onChange={handleChange}\n                                                required\n                                                value={values.password}\n                                                variant=\"outlined\"/>\n                                        </Grid>\n                                        <Grid item lg={4} md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Periode\"\n                                                name=\"periode\"\n                                                onChange={handleChange}\n                                                required\n                                                value={values.periode}\n                                                variant=\"outlined\"/>\n                                        </Grid>\n                                        <Grid item lg={4} md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Factor\"\n                                                name=\"factor\"\n                                                onChange={handleChange}\n                                                required\n                                                value={values.factor}\n                                                variant=\"outlined\"/>\n                                        </Grid>\n                                        <Grid item lg={4} md={6} xs={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Pay\"\n                                                name=\"pay\"\n                                                onChange={handleChange}\n                                                required\n                                                value={values.pay}\n                                                variant=\"outlined\"/>\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                                <Divider/>\n                                <CardActions>\n                                    <Button className={classes.saveButton} type=\"submit\" variant=\"contained\">\n                                        Save Changes\n                                    </Button>\n                                </CardActions>\n                                <SuccessSnackbar onClose={handleSnackbarClose} open={openSnackbar}/>\n                            </Card>\n                        </Grid>\n                    </Grid>\n                </form>\n            </div>\n        </Page>\n    );\n};\n\nSettings.propTypes = {\n    history: PropTypes.object.isRequired,\n    match: PropTypes.object.isRequired\n};\n\nexport default Settings;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  FormControlLabel,\n  Checkbox,\n  Typography,\n  Button,\n  Divider,\n  colors\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  item: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}));\n\nconst Notifications = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Notifications\" />\n      <Divider />\n      <CardContent>\n        <form>\n          <Grid\n            container\n            spacing={6}\n            wrap=\"wrap\"\n          >\n            <Grid\n              className={classes.item}\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <Typography\n                gutterBottom\n                variant=\"h6\"\n              >\n                System\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"body2\"\n              >\n                You will recieve emails in your business email address\n              </Typography>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Email alerts\"\n              />\n              <FormControlLabel\n                control={<Checkbox color=\"primary\" />}\n                label=\"Push Notifications\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Text message\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label={\n                  <Fragment>\n                    <Typography variant=\"body1\">Phone calls</Typography>\n                    <Typography variant=\"caption\">\n                      Short voice phone updating you\n                    </Typography>\n                  </Fragment>\n                }\n              />\n            </Grid>\n            <Grid\n              className={classes.item}\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <Typography\n                gutterBottom\n                variant=\"h6\"\n              >\n                Chat App\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"body2\"\n              >\n                You will recieve emails in your business email address\n              </Typography>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Email\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Push notifications\"\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n      <Divider />\n      <CardActions>\n        <Button\n          className={classes.saveButton}\n          variant=\"contained\"\n        >\n          Save changes\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nNotifications.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Notifications;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  Button,\n  Divider,\n  TextField,\n  colors\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}));\n\nconst Security = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n\n  const [values, setValues] = useState({\n    password: '',\n    confirm: ''\n  });\n\n  const handleChange = event => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const valid = values.password && values.password === values.confirm;\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Change password\" />\n      <Divider />\n      <CardContent>\n        <form>\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Security\"\n                name=\"password\"\n                onChange={handleChange}\n                type=\"password\"\n                value={values.password}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Confirm password\"\n                name=\"confirm\"\n                onChange={handleChange}\n                type=\"password\"\n                value={values.confirm}\n                variant=\"outlined\"\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n      <Divider />\n      <CardActions>\n        <Button\n          className={classes.saveButton}\n          disabled={!valid}\n          variant=\"contained\"\n        >\n          Save changes\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nSecurity.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Security;\n","import React, { useState, useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  Link,\n  Typography\n} from '@material-ui/core';\n\nimport axios from 'utils/axios';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  action: {\n    marginRight: 0,\n    marginTop: 0\n  },\n  overview: {\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column-reverse',\n      alignItems: 'flex-start'\n    }\n  },\n  product: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  productImage: {\n    marginRight: theme.spacing(1),\n    height: 48,\n    width: 48\n  },\n  details: {\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column',\n      alignItems: 'flex-start'\n    }\n  },\n  notice: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nconst Subscription = props => {\n  const { className, ...rest } = props;\n\n  const classes = useStyles();\n  const [subscription, setSubscription] = useState(null);\n\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchSubscription = () => {\n      axios.get('/api/account/subscription').then(response => {\n        if (mounted) {\n          setSubscription(response.data.subscription);\n        }\n      });\n    };\n\n    fetchSubscription();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  if (!subscription) {\n    return null;\n  }\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader\n        action={\n          <Button\n            size=\"small\"\n            variant=\"contained\"\n          >\n            Upgrade plan\n          </Button>\n        }\n        classes={{ action: classes.action }}\n        title=\"Manage your subscription\"\n      />\n      <Divider />\n      <CardContent>\n        <Card>\n          <CardContent className={classes.overview}>\n            <div>\n              <Typography\n                display=\"inline\"\n                variant=\"h4\"\n              >\n                {subscription.currency}\n                {subscription.price}\n              </Typography>\n              <Typography\n                display=\"inline\"\n                variant=\"subtitle1\"\n              >\n                /mo\n              </Typography>\n            </div>\n            <div className={classes.product}>\n              <img\n                alt=\"Product\"\n                className={classes.productImage}\n                src=\"/images/products/product_freelancer.svg\"\n              />\n              <Typography variant=\"overline\">{subscription.name}</Typography>\n            </div>\n          </CardContent>\n          <Divider />\n          <CardContent className={classes.details}>\n            <div>\n              <Typography variant=\"body1\">\n                {subscription.proposalsLeft} proposals left\n              </Typography>\n              <Typography variant=\"body1\">\n                {subscription.templatesLeft} templates\n              </Typography>\n            </div>\n            <div>\n              <Typography variant=\"body1\">\n                {subscription.invitesLeft} invites left\n              </Typography>\n              <Typography variant=\"body1\">\n                {subscription.adsLeft} ads left\n              </Typography>\n            </div>\n            <div>\n              {subscription.hasAnalytics && (\n                <Typography variant=\"body1\">Analytics dashboard</Typography>\n              )}\n              {subscription.hasEmailAlerts && (\n                <Typography variant=\"body1\">Email alerts</Typography>\n              )}\n            </div>\n          </CardContent>\n          <Divider />\n        </Card>\n        <Typography\n          className={classes.notice}\n          variant=\"body2\"\n        >\n          The refunds don't work once you have the subscription, but you can\n          always{' '}\n          <Link\n            color=\"secondary\"\n            component={RouterLink}\n            to=\"#\"\n          >\n            Cancel your subscription\n          </Link>\n          .\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nSubscription.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Subscription;\n","export { default } from './Settings';\n"],"sourceRoot":""}